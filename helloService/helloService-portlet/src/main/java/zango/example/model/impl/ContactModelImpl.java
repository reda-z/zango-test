package zango.example.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import zango.example.model.Contact;
import zango.example.model.ContactModel;
import zango.example.model.ContactSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Contact service. Represents a row in the &quot;helloService_Contact&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link zango.example.model.ContactModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ContactImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ContactImpl
 * @see zango.example.model.Contact
 * @see zango.example.model.ContactModel
 * @generated
 */
@JSON(strict = true)
public class ContactModelImpl extends BaseModelImpl<Contact>
    implements ContactModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a contact model instance should use the {@link zango.example.model.Contact} interface instead.
     */
    public static final String TABLE_NAME = "helloService_Contact";
    public static final Object[][] TABLE_COLUMNS = {
            { "uuid_", Types.VARCHAR },
            { "contactId", Types.BIGINT },
            { "lastName", Types.VARCHAR },
            { "firstName", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table helloService_Contact (uuid_ VARCHAR(75) null,contactId LONG not null primary key,lastName VARCHAR(75) null,firstName VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table helloService_Contact";
    public static final String ORDER_BY_JPQL = " ORDER BY contact.contactId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY helloService_Contact.contactId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.zango.example.model.Contact"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.zango.example.model.Contact"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.zango.example.model.Contact"),
            true);
    public static long UUID_COLUMN_BITMASK = 1L;
    public static long CONTACTID_COLUMN_BITMASK = 2L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.zango.example.model.Contact"));
    private static ClassLoader _classLoader = Contact.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            Contact.class
        };
    private String _uuid;
    private String _originalUuid;
    private long _contactId;
    private String _lastName;
    private String _firstName;
    private long _columnBitmask;
    private Contact _escapedModel;

    public ContactModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static Contact toModel(ContactSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        Contact model = new ContactImpl();

        model.setUuid(soapModel.getUuid());
        model.setContactId(soapModel.getContactId());
        model.setLastName(soapModel.getLastName());
        model.setFirstName(soapModel.getFirstName());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<Contact> toModels(ContactSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<Contact> models = new ArrayList<Contact>(soapModels.length);

        for (ContactSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _contactId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setContactId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _contactId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Contact.class;
    }

    @Override
    public String getModelClassName() {
        return Contact.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("uuid", getUuid());
        attributes.put("contactId", getContactId());
        attributes.put("lastName", getLastName());
        attributes.put("firstName", getFirstName());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        String uuid = (String) attributes.get("uuid");

        if (uuid != null) {
            setUuid(uuid);
        }

        Long contactId = (Long) attributes.get("contactId");

        if (contactId != null) {
            setContactId(contactId);
        }

        String lastName = (String) attributes.get("lastName");

        if (lastName != null) {
            setLastName(lastName);
        }

        String firstName = (String) attributes.get("firstName");

        if (firstName != null) {
            setFirstName(firstName);
        }
    }

    @JSON
    @Override
    public String getUuid() {
        if (_uuid == null) {
            return StringPool.BLANK;
        } else {
            return _uuid;
        }
    }

    @Override
    public void setUuid(String uuid) {
        if (_originalUuid == null) {
            _originalUuid = _uuid;
        }

        _uuid = uuid;
    }

    public String getOriginalUuid() {
        return GetterUtil.getString(_originalUuid);
    }

    @JSON
    @Override
    public long getContactId() {
        return _contactId;
    }

    @Override
    public void setContactId(long contactId) {
        _contactId = contactId;
    }

    @JSON
    @Override
    public String getLastName() {
        if (_lastName == null) {
            return StringPool.BLANK;
        } else {
            return _lastName;
        }
    }

    @Override
    public void setLastName(String lastName) {
        _lastName = lastName;
    }

    @JSON
    @Override
    public String getFirstName() {
        if (_firstName == null) {
            return StringPool.BLANK;
        } else {
            return _firstName;
        }
    }

    @Override
    public void setFirstName(String firstName) {
        _firstName = firstName;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            Contact.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Contact toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Contact) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        ContactImpl contactImpl = new ContactImpl();

        contactImpl.setUuid(getUuid());
        contactImpl.setContactId(getContactId());
        contactImpl.setLastName(getLastName());
        contactImpl.setFirstName(getFirstName());

        contactImpl.resetOriginalValues();

        return contactImpl;
    }

    @Override
    public int compareTo(Contact contact) {
        long primaryKey = contact.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Contact)) {
            return false;
        }

        Contact contact = (Contact) obj;

        long primaryKey = contact.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        ContactModelImpl contactModelImpl = this;

        contactModelImpl._originalUuid = contactModelImpl._uuid;

        contactModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Contact> toCacheModel() {
        ContactCacheModel contactCacheModel = new ContactCacheModel();

        contactCacheModel.uuid = getUuid();

        String uuid = contactCacheModel.uuid;

        if ((uuid != null) && (uuid.length() == 0)) {
            contactCacheModel.uuid = null;
        }

        contactCacheModel.contactId = getContactId();

        contactCacheModel.lastName = getLastName();

        String lastName = contactCacheModel.lastName;

        if ((lastName != null) && (lastName.length() == 0)) {
            contactCacheModel.lastName = null;
        }

        contactCacheModel.firstName = getFirstName();

        String firstName = contactCacheModel.firstName;

        if ((firstName != null) && (firstName.length() == 0)) {
            contactCacheModel.firstName = null;
        }

        return contactCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(9);

        sb.append("{uuid=");
        sb.append(getUuid());
        sb.append(", contactId=");
        sb.append(getContactId());
        sb.append(", lastName=");
        sb.append(getLastName());
        sb.append(", firstName=");
        sb.append(getFirstName());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(16);

        sb.append("<model><model-name>");
        sb.append("zango.example.model.Contact");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>uuid</column-name><column-value><![CDATA[");
        sb.append(getUuid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>contactId</column-name><column-value><![CDATA[");
        sb.append(getContactId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>lastName</column-name><column-value><![CDATA[");
        sb.append(getLastName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>firstName</column-name><column-value><![CDATA[");
        sb.append(getFirstName());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
